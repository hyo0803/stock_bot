from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types.input_file import FSInputFile
from aiogram.types import Message, ReplyKeyboardRemove,KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

import numpy as np
import pandas as pd
from datetime import datetime
import asyncio

from src.data_handlers.db_executor import db
from src.keyboards.kb import make_row_keyboard
from src.models import preprocess, linear, nn_gru
from src.graphs import qplot

router = Router()

class Predict(StatesGroup):
    predict_type = State()
    predict_fut_days = State()
    predict_state_LR = State()
    predict_state_GRU = State()
    

@router.message(Command(commands=["predict"]))
@router.message(F.text.lower().in_(["–ø—Ä–æ–≥–Ω–æ–∑", '–Ω–∞–∑–∞–¥‚è™']))
async def cmd_predict(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    last_req_prices = await db.lookup_request_prices(user_id)
    last_user_data = await db.lookup_user_data(user_id)
    
    if not last_req_prices.empty and not last_user_data.empty:
        security_p = last_req_prices['security'].values[0]
        security_u = last_user_data['security'].values[0]
        
        if security_p==security_u:
            currency = last_req_prices['currency'].values[0]
            predict_data = last_req_prices[['close','security','date']]
            
            await state.update_data(user_id=user_id, 
                                    predict_data=predict_data,
                                    currency=currency,
                                    security=security_p)
            await message.answer(
                text=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:\n" 
                    f"–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ - {security_p}\n\n–í–µ—Ä–Ω–æ?",
                reply_markup=make_row_keyboard(['–î–∞', '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'])
            )
            
            await state.set_state(Predict.predict_type)
        else:
            print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! –û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å')
            await message.answer(
                text="–Ø –Ω–µ –≤–∏–∂—É, –¥–ª—è –∫–∞–∫–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑üò©\n"
                    "\–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                reply_markup=make_row_keyboard(['–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–°–±—Ä–æ—Å'])
            )
            await state.clear()
    else:
        await message.answer(
                text="–ö–∞–∂–µ—Ç—Å—è, –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
                    "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', —á—Ç–æ–±—ã —è —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ü–∏—é",
                reply_markup=make_row_keyboard(['–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–°–±—Ä–æ—Å'])
        )
        await state.clear()

# @router.message(Predict.predict_type)
# async def pred_type_incorrect(message: Message, state: FSMContext):
#     await message.answer(
#                 text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ",
#                 reply_markup=make_row_keyboard(['–î–∞', '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'])
#             )
    
@router.message(Predict.predict_type,
                F.text.lower()=='–¥–∞')
async def pred_type(message: Message, state: FSMContext):
    await message.answer(
                text="–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
                    "\n–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (7+ –¥–Ω–µ–π)"
                    "\n–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (–¥–æ 7 –¥–Ω–µ–π)",
                reply_markup=make_row_keyboard(['–ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫', '–ù–∞ –∫—Ä–∞—Ç–∫–∏–π —Å—Ä–æ–∫'])
        )
    await state.set_state(Predict.predict_fut_days)
    
    
@router.message(Predict.predict_fut_days,
                F.text.lower().in_(["–Ω–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫", '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞', 
                                    '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (7+ –¥–Ω–µ–π)', '7+ –¥–Ω–µ–π']))
async def pred_long_input_fut(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    for i in range(7, 31):
        builder.add(KeyboardButton(text=str(i)))
    builder.adjust(4)
    await message.answer(
            text="\n–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å?üëÄ\n" 
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 30",
            reply_markup = builder.as_markup(resize_keyboard=True)
        )
    await state.set_state(Predict.predict_state_LR)


@router.message(Predict.predict_fut_days, 
                F.text.lower().in_(["–Ω–∞ –∫—Ä–∞—Ç–∫–∏–π —Å—Ä–æ–∫", '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞', 
                                        '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (–¥–æ 7 –¥–Ω–µ–π)', '–¥–æ 7 –¥–Ω–µ–π']))
async def pred_long_input_fut(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    for i in [1,2,3,4,5,6]:
        builder.add(KeyboardButton(text=str(i)))
    builder.adjust(3)
    await message.answer(
            text="\n–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å?üëÄ\n" 
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6",
            reply_markup = builder.as_markup(resize_keyboard=True)
        )
    await state.set_state(Predict.predict_state_GRU)
    
    
@router.message(Predict.predict_fut_days)
async def pred_long_input_fut_incorrect(message: Message, state: FSMContext):
   await message.answer(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫\n\n"
                    "–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
                    "\n–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (7+ –¥–Ω–µ–π)"
                    "\n–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ (–¥–æ 7 –¥–Ω–µ–π)",
                reply_markup=make_row_keyboard(['–ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫', '–ù–∞ –∫—Ä–∞—Ç–∫–∏–π —Å—Ä–æ–∫'])
        )


@router.message(Predict.predict_state_LR, lambda x: x.text.isdigit() and 7 <= int(x.text) <= 30)
async def predict_LR(message: Message, state: FSMContext):
    await state.update_data(fut_days=message.text)
    data = await state.get_data()
    user_id = data['user_id']
    predict_data = data['predict_data']
    fut_days = int(data['fut_days'])
    currency = data['currency']
    security = data['security']
    
    clean_data = preprocess.clean(predict_data)
    # print(clean_data)
    
    model, scaler = linear.train_linear(clean_data)
    pred, recommendation = linear.predict_future_prices(clean_data, model, scaler, fut_days)

    file_path = qplot.plot_predict_future(clean_data, pred, security, currency)
    graph = FSInputFile(path=file_path)
    await message.reply_photo(photo=graph, caption=f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {fut_days} –¥–Ω–µ–π {security} ({currency})') 

    start_date = str(datetime.strptime(clean_data.index.min().strftime('%Y-%m-%d'), 
                                                '%Y-%m-%d').date())
    end_date = str(datetime.strptime(pred.index.max().strftime('%Y-%m-%d'), 
                                                '%Y-%m-%d').date())

    plot_data = pd.DataFrame.from_dict({'user_id':[user_id], 
                                    'use_date': [datetime.now()],
                                    'security': [security],
                                    'start_date': [start_date],
                                    'end_date': [end_date],
                                    'currency': [currency],
                                    'plt_type': ['LinearRegression'],
                                    'plot_file_path': [file_path]})
    await state.update_data(plot_data=plot_data)
    await db.add_plotdata(state, user_id)
            
    p = pred.reset_index()
    down=0
    up=0
    text = '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n'
    for row in p.index:
        if p['Date'].loc[row]==p['Date'].min():
            text += '–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–î–∞—Ç–∞)    |      –¶–µ–Ω–∞  \n------------------------\n'   
            text += f"{p['Date'].loc[row].strftime('%Y-%m-%d')}   |   {np.round(p['Predicted Close'].loc[row], 2)} {currency}\n"
        elif p['Date'].loc[row]==p['Date'].max():
            text += '\n–ö–æ–Ω–µ—Ü –ø—Ä–æ–≥–Ω–æ–∑–∞ (–î–∞—Ç–∞)    |      –¶–µ–Ω–∞  \n------------------------\n'   
            text += f"{p['Date'].loc[row].strftime('%Y-%m-%d')}   |   {np.round(p['Predicted Close'].loc[row], 2)} {currency}\n"
            
        if p['Result'].loc[row]=='—Å–ø–∞–¥': 
            down+=1
        elif p['Result'].loc[row]=='—Ä–æ—Å—Ç': 
            up+=1
        
    downs = p[p['Result']=='—Å–ø–∞–¥']['Predicted Close'].diff(1).fillna(0)
    downs = np.round(downs.sum(), 2)
    
    ups = p[p['Result']=='—Ä–æ—Å—Ç']['Predicted Close'].diff(1).fillna(0)
    ups = np.round(ups.sum(), 2)
        
    text += f'\n\n–°–ø–∞–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {downs}'
    text += f'\n–†–æ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {ups}'
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç
    if down>up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n–°–ü–ê–îüìâ‚ÜòÔ∏è", 
                        reply_markup=ReplyKeyboardRemove())
    elif down<up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n–†–û–°–¢üìà‚ÜóÔ∏è", 
                        reply_markup=ReplyKeyboardRemove())
    elif down==up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –ù–ï –æ–∂–∏–¥–∞–µ—Ç—Å—è", 
                        reply_markup=ReplyKeyboardRemove())
    
    await message.answer(text=f"–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}", 
                        reply_markup=ReplyKeyboardRemove())  
        
    await message.answer(text=text, 
                        reply_markup=make_row_keyboard(['–ù–∞–∑–∞–¥‚è™'])
                        )
    
@router.message(Predict.predict_state_LR)
async def predict_LR_incorrect(message: Message, state: FSMContext):
     await message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 7 –¥–æ 30")
     
     
@router.message(Predict.predict_state_GRU, lambda x: x.text.isdigit() and 1 <= int(x.text) <= 6)
async def predict_GRU(message: Message, state: FSMContext):
    await state.update_data(fut_days=message.text)
    data = await state.get_data()
    user_id = data['user_id']
    predict_data = data['predict_data']
    fut_days = int(data['fut_days'])
    currency = data['currency']
    security = data['security']
    
    look_back = 20
    data, dataset, data_loader = preprocess.dataset_init(predict_data, security)
    
    #await () –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
    # await message.bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    # await asyncio.sleep(3)
    await message.answer(
                text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –û–±—ã—á–Ω–æ, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã\n",
                reply_markup=ReplyKeyboardRemove())
    gru_model = await nn_gru.gru_init_train(data_loader)
    
    last_lookback_data, future_predictions = await nn_gru.predict_future_prices(gru_model, data, security, look_back, fut_days)
    
    predictions_df, recommendation = nn_gru.get_results(data, future_predictions)
    file_path = qplot.plot_predict_future(data, predictions_df, security, currency)
    graph = FSInputFile(path=file_path)
    await message.reply_photo(photo=graph, caption=f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {fut_days} –¥–Ω–µ–π {security} ({currency})') 

    start_date = str(datetime.strptime(data.index.min().strftime('%Y-%m-%d'), 
                                                '%Y-%m-%d').date())
    end_date = str(datetime.strptime(predictions_df.index.max().strftime('%Y-%m-%d'), 
                                                '%Y-%m-%d').date())

    plot_data = pd.DataFrame.from_dict({'user_id':[user_id], 
                                    'use_date': [datetime.now()],
                                    'security': [security],
                                    'start_date': [start_date],
                                    'end_date': [end_date],
                                    'currency': [currency],
                                    'plt_type': ['GRU'],
                                    'plot_file_path': [file_path]})
    await state.update_data(plot_data=plot_data)
    await db.add_plotdata(state, user_id)
    
    p = predictions_df.reset_index()
    down=0
    up=0
    
    text = '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:\n\n      –î–∞—Ç–∞      |      –¶–µ–Ω–∞  \n------------------------\n'
    for row in p.index:
        text += f"{p['Date'].loc[row].strftime('%Y-%m-%d')}   |   {np.round(p['Predicted Close'].loc[row], 2)} {currency}\n"
        if p['Result'].loc[row]=='—Å–ø–∞–¥': down+=1
        elif p['Result'].loc[row]=='—Ä–æ—Å—Ç': up+=1
        
    downs = p[p['Result']=='—Å–ø–∞–¥']['Predicted Close'].diff(1).fillna(0)
    downs = np.round(downs.sum(), 2)
    
    ups = p[p['Result']=='—Ä–æ—Å—Ç']['Predicted Close'].diff(1).fillna(0)
    ups = np.round(ups.sum(), 2)
        
    text += f'\n\n–°–ø–∞–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {downs}'
    text += f'\n–†–æ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {ups}'
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç
    if down>up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n–°–ü–ê–îüìâ‚ÜòÔ∏è", 
                        reply_markup=ReplyKeyboardRemove())
    elif down<up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n–†–û–°–¢üìà‚ÜóÔ∏è", 
                        reply_markup=ReplyKeyboardRemove())
    elif down==up:
        await message.answer(text=f"–í —Å—Ä–µ–¥–Ω–µ–º —á–µ—Ä–µ–∑ {fut_days} –¥–Ω–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –ù–ï –æ–∂–∏–¥–∞–µ—Ç—Å—è", 
                        reply_markup=ReplyKeyboardRemove())
    
    await message.answer(text=f"–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}", 
                        reply_markup=ReplyKeyboardRemove())  
        
    await message.answer(text=text, 
                        reply_markup=make_row_keyboard(['–ù–∞–∑–∞–¥‚è™'])
                        )