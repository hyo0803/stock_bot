from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton
from src.keyboards.kb import make_row_keyboard
import pandas as pd

from src.data_handlers.db_executor import db
from src.handlers import stock, predict, graphics

router = Router()
router.include_routers(stock.router, predict.router, graphics.router)
# define engine
@router.message(Command(commands=["start"]))
@router.message(F.text.lower() == "start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    instr = [KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')]
    sett = [KeyboardButton(text=item) for item in ["–°–±—Ä–æ—Å","–ö–æ–º–∞–Ω–¥—ã"]]
    
    await message.answer(
        text="\n‚úãüëÄ–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stock_instrument –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'",
        reply_markup=ReplyKeyboardMarkup(keyboard=[instr, sett], one_time_keyboard=True, resize_keyboard=True)
        )
    await db.create_userdata(user_id=message.from_user.id)
    await db.create_plotdata(user_id=message.from_user.id)
    
@router.message(Command(commands=["commands"]))
@router.message(F.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def cmd_comands(message: Message, state: FSMContext):
    await message.answer(
        text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (/commands):\n"
            "\n1. /stock_instrument - –í—ã–±–æ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏, –ø–µ—Ä–∏–æ–¥–∞ –∏ –¥–Ω–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
            "\n2. /predict - –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏ –Ω–∞ N –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥" 
            "\n3. /graphics - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ü–µ–Ω—ã –∏ —Å–≥–ª–∞–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            "\n4. /reset - –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        
        reply_markup=ReplyKeyboardRemove())


@router.message(F.text.lower()=='–Ω–∞–∑–∞–¥‚è™')
async def back(message: Message):
    m_ru = {'shares':'–ê–∫—Ü–∏–∏', 'bonds':'–û–±–ª–∏–≥–∞—Ü–∏–∏'}
    
    du = await db.lookup_user_data(message.from_user.id)
    dp = await db.lookup_request_prices(message.from_user.id)
    if not du.empty and not dp.empty:
        security_p = dp['security'].values[0]
        security_u = du['security'].values[0]
        if security_p==security_u:
            security = security_p
            market_name_ru = m_ru[du['market'].values[0]]
            start_date = pd.to_datetime(dp['q_date']).min().strftime('%Y-%m-%d')
            fut_days = du['fut_days'].values[0]
            await message.answer(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏:" 
                    f"\n{market_name_ru} –Ω–∞ –§–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ\n"
                    f"–°–∏–º–≤–æ–ª - {security}\n" 
                    f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ - {start_date}\n"
                    f"–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {fut_days} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥",
                reply_markup=make_row_keyboard(['–ü—Ä–æ–≥–Ω–æ–∑', '–ì—Ä–∞—Ñ–∏–∫', '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'])
            )
        else:
            await message.answer(
                text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Öüò©\n"
                    "\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                reply_markup=make_row_keyboard(['–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–°–±—Ä–æ—Å'])
            )


# # default_state - —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ StateFilter(None)
# @router.message(StateFilter(None), Command(commands=["cancel"]))
# @router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
# async def cmd_cancel_no_state(message: Message, state: FSMContext):
#     # –°—Ç–µ–π—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
#     await state.set_data({})
#     await message.answer(
#         text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
#         reply_markup=ReplyKeyboardRemove()
#     )

@router.message(Command(commands=["reset"]))
@router.message(F.text.lower() == "—Å–±—Ä–æ—Å")
async def cmd_reset(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ",
        reply_markup=make_row_keyboard(['start'])
    )
    