from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove,KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

import re
import numpy as np
import pandas as pd
from datetime import datetime

from src.keyboards.kb import make_row_keyboard#, number_buttons
from src.data_handlers.db_executor import db
from src.data_handlers.downloader import MarketDataDownloader
# from src.handlers import router_shares, router_bonds

router = Router()

class StockInputData(StatesGroup):
    choose_market = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä—Ä–∞
    input_security = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞
    input_start_date = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    input_future_days = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    # input_command = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    
    
@router.message(Command(commands=["stock_instrument"]))
@router.message(F.text.lower().in_(['–≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', '–≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç']))
async def cmd_market(message: Message, state: FSMContext):
    await state.update_data(engine='stock')
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞:\n"
            "\n1. –ê–∫—Ü–∏–∏"
            "\n2. –û–±–ª–∏–≥–∞—Ü–∏–∏",#"\n–ö–∞–∫—É—é —Ü–µ–Ω–Ω—É—é –±—É–º–∞–≥—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å?\n(—Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: SBER)"
        reply_markup=make_row_keyboard(['–û–±–ª–∏–≥–∞—Ü–∏–∏','–ê–∫—Ü–∏–∏'])
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(StockInputData.choose_market)
    
    
@router.message(StockInputData.choose_market,
                   F.text.lower().in_(['–∞–∫—Ü–∏–∏', 'shares']))
async def shares_init(message: Message, state: FSMContext):
    await state.update_data(market_name='shares', market_name_ru='–ê–∫—Ü–∏–∏')
    await message.answer(
        text="\n–ö–∞–∫—É—é –∞–∫—Ü–∏—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å?\n(–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: SBER)"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(StockInputData.input_security)
    
    
@router.message(StockInputData.choose_market,
                   F.text.lower().in_(['–æ–±–ª–∏–≥–∞—Ü–∏–∏', 'bonds']))
async def bonds_init(message: Message, state: FSMContext):
    await state.update_data(market_name='bonds',market_name_ru='–û–±–ª–∏–≥–∞—Ü–∏–∏')
    await message.answer(
        text="\n–ö–∞–∫—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å?\n(–í–≤–µ–¥–∏—Ç–µ ISIN –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: RU000A0JUMH3)"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(StockInputData.input_security)
    
    
#incorrect market
@router.message(StockInputData.choose_market)
async def market_incorrect(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "\n'–ê–∫—Ü–∏–∏' - –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏"
            "\n'–û–±–ª–∏–≥–∞—Ü–∏–∏' - –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏",
        reply_markup=make_row_keyboard(['–ê–∫—Ü–∏–∏', '–û–±–ª–∏–≥–∞—Ü–∏–∏'])
    )


@router.message(StockInputData.input_security)
async def input_security(message: Message, state: FSMContext):
    
    user_id = message.from_user.id
    user_input = message.text.upper()
    await state.update_data(user_id=user_id, security=user_input)
    
    await message.answer(
        text="–ò—â—É –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö‚è≥...",
    )
    data = await state.get_data()
    
    market = data['market_name']
    price_data = await db.lookup_security(state, user_id)
    
    if price_data.empty:
        await message.answer(
                text="–ü—Ä–æ–≤–æ–∂—É –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ‚è≥..."
            )
        md = MarketDataDownloader(db.db, db.cursor)
        await md.fit(input_data=[user_input], engine='stock', market_name=market)
        price_data = md.get_data()
        if not price_data.empty:
            #–Ω–∞—à–ª–æ—Å—å -> –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
            price_data['q_date'] = pd.to_datetime(price_data['q_date'].astype(object)).dt.date
            price_data['row_id'] = np.random.randint(low=db.prices_len, 
                                                     high=db.prices_len+price_data.shape[0],
                                                     size=(price_data.shape[0]))
            await state.update_data(security=user_input, prices=price_data)
            # await db.insert_prices(state, user_id)
            await message.answer(text='''–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ü¶æ‚úÖ''',
                                 reply_markup=ReplyKeyboardRemove())
            
            await message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤ \n(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)\n"
                    "\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'",
                reply_markup=make_row_keyboard(['–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'])
            )
            await state.set_state(StockInputData.input_start_date)
        else:
            await message.answer(
                text="–î–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ωüòï\n"
                    "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "(–¢–∏–∫–µ—Ä/ISIN, –Ω–∞–ø—Ä–∏–º–µ—Ä SBER)",
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await state.update_data(security=user_input, prices=price_data)
        await message.answer(text='''–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ü¶æ‚úÖ''',
                             reply_markup=ReplyKeyboardRemove())
        
        await message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤ \n(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)?\n"
                    "\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'",
                reply_markup=make_row_keyboard(['–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'])
            )
        await state.set_state(StockInputData.input_start_date)
    
    
#incorrect security/ticker
@router.message(StockInputData.input_security)
async def security_incorrect(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µüòï\n"
            "–¢–∏–∫–µ—Ä/ISIN, –Ω–∞–ø—Ä–∏–º–µ—Ä SBER",
        reply_markup=ReplyKeyboardRemove()
    )
    
    
#start date - all period
@router.message(StockInputData.input_start_date,  
                F.text.lower()=='–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥')
async def input_start_date_all(message: Message, state: FSMContext):
    await message.answer(text='''–§–µ—Ç—á–∏–º –¥–∞—Ç—ã...''',
                        reply_markup=ReplyKeyboardRemove())
    
    data = await state.get_data()
    user_id = data['user_id']
    security = data['security']
    market = data['market_name']
    
    md = MarketDataDownloader(db.db, db.cursor)
    await md.fit(input_data=[security], engine='stock', market_name=market)
    price_data = md.get_data()
    # price_data = data['prices']
    
    dates = pd.to_datetime(price_data['q_date'])
    
    start_date = datetime.strptime(dates.min().strftime('%Y-%m-%d'), '%Y-%m-%d').date()
    end_date = datetime.strptime(dates.max().strftime('%Y-%m-%d'), '%Y-%m-%d').date()
    current_date = datetime.now().date()
    f = 0
    
    start_date = pd.to_datetime(str(start_date))
    part_data = price_data.copy()
    part_data = part_data.set_index('q_date')
    part_data.index = pd.to_datetime(part_data.index)
    part_data = part_data.sort_index(ascending=True)

    part_data = part_data.loc[start_date:]     
    part_data = part_data.reset_index()
    part_data['q_date'] = pd.to_datetime(part_data['q_date'].astype(object)).dt.date
    
    if end_date < current_date:
        md = MarketDataDownloader(db.db, db.cursor)
        await md.fit(input_data=[security], engine='stock', market_name=market, start_date=str(end_date))
        new_data = md.get_data()
        if not new_data.empty or new_data!=None:
            #–Ω–∞—à–ª–æ—Å—å -> –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
            new_data['q_date'] = pd.to_datetime(new_data['q_date'].astype(object)).dt.date
            new_data['row_id'] = np.random.randint(low=db.prices_len, 
                                                     high=db.prices_len+new_data.shape[0],
                                                     size=(new_data.shape[0]))
            await state.update_data(prices=new_data)
            # await db.insert_prices(state, user_id)
    
            price_data = pd.concat([part_data, new_data]).reset_index(drop=True)
            price_data = price_data.drop_duplicates()
            start_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).min().strftime('%Y-%m-%d'), 
                                            '%Y-%m-%d').date())
            end_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).max().strftime('%Y-%m-%d'), 
                                            '%Y-%m-%d').date())
            f = 1
    if f==1:
        cur = price_data['currency'].values[0]
        await state.update_data(prices=price_data,
                                start_date=start_date, 
                                end_date=end_date,
                                cur=cur)
        
        builder = ReplyKeyboardBuilder()
        for i in range(1, 21):
            builder.add(KeyboardButton(text=str(i)))
        builder.adjust(4)
        await message.answer(
                text="–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!üëÄ\n"
                    "\n–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å?\n" 
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20",
                reply_markup = builder.as_markup(resize_keyboard=True)
            )
        await state.set_state(StockInputData.input_future_days)
    else:
       await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '2019-01-01' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'",
                reply_markup=make_row_keyboard(['–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'])
            )
        
        
#start date - from exact date
@router.message(StockInputData.input_start_date)
async def input_start_date_part(message: Message, state: FSMContext):
    await message.answer(text='''–§–µ—Ç—á–∏–º –¥–∞—Ç—ã...''',
                        reply_markup=ReplyKeyboardRemove())
    data = await state.get_data()
    user_id = data['user_id']
    security = data['security']
    market = data['market_name']
    
    # price_data = data['prices']
    md = MarketDataDownloader(db.db, db.cursor)
    await md.fit(input_data=[security], engine='stock', market_name=market)
    price_data = md.get_data()
    
    dates = pd.to_datetime(price_data['q_date'])
    
    start_date = message.text
    end_date = datetime.strptime(dates.max().strftime('%Y-%m-%d'), '%Y-%m-%d').date()
    current_date = datetime.now().date()
    f = 0
    
    if re.match('\d{4}-\d{2}-\d{2}', start_date):
            input_date = datetime.strptime(start_date, '%Y-%m-%d').date()
            if input_date > current_date:
                await message.reply("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π!")
            elif 1970 > input_date.year > current_date.year:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥")
            elif 0 > input_date.month > 12:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü")
            elif 0 > input_date.day > 31:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å")
            else:
                    start_date = pd.to_datetime(start_date)
                # try:
                    part_data = price_data.copy()
                    part_data = part_data.set_index('q_date')
                    part_data.index = pd.to_datetime(part_data.index)
                    part_data = part_data.sort_index(ascending=True)

                    part_data = part_data.loc[start_date:]     
                    part_data = part_data.reset_index()
                    part_data['q_date'] = pd.to_datetime(part_data['q_date'].astype(object)).dt.date
            
                    if end_date < current_date:
                        md = MarketDataDownloader(db.db, db.cursor)
                        await md.fit(input_data=[security], engine='stock', market_name=market, start_date=str(end_date))
                        new_data = md.get_data()
                        if not new_data.empty or new_data!=None:
                            #–Ω–∞—à–ª–æ—Å—å -> –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
                            new_data['q_date'] = pd.to_datetime(new_data['q_date'].astype(object)).dt.date
                            new_data['row_id'] = np.random.randint(low=db.prices_len, 
                                                                    high=db.prices_len+new_data.shape[0],
                                                                    size=(new_data.shape[0]))
                            await state.update_data(prices=new_data)
                            # await db.insert_prices(state, user_id)
                    
                            price_data = pd.concat([part_data, new_data]).reset_index(drop=True)
                            price_data = price_data.drop_duplicates()
                            start_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).min().strftime('%Y-%m-%d'), 
                                                           '%Y-%m-%d').date())
                            end_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).max().strftime('%Y-%m-%d'), 
                                                           '%Y-%m-%d').date())
                            f = 1
                        else:
                            f = 1
                            price_data = part_data
                            start_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).min().strftime('%Y-%m-%d'), 
                                                           '%Y-%m-%d').date())
                            end_date = str(datetime.strptime(pd.to_datetime(price_data['q_date']).max().strftime('%Y-%m-%d'), 
                                                           '%Y-%m-%d').date())
                            await state.update_data(prices=new_data)
                # except:
                    # print('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞')
                    # f=0
    if f==1:
        cur = price_data['currency'].values[0]
        await state.update_data(prices=price_data,
                                start_date=start_date, 
                                end_date=end_date,
                                cur=cur)
        
        builder = ReplyKeyboardBuilder()
        for i in range(1, 21):
            builder.add(KeyboardButton(text=str(i)))
        builder.adjust(4)
        await message.answer(
                text="–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!üëÄ\n"
                    "\n–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å?\n" 
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20",
                reply_markup = builder.as_markup(resize_keyboard=True)
            )
        await state.set_state(StockInputData.input_future_days)
    else:
        await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '2019-01-01' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'",
                reply_markup=make_row_keyboard(['–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'])
            )
        
#future days
@router.message(StockInputData.input_future_days, lambda x: x.text.isdigit() and 1 <= int(x.text) <= 20)
async def input_fut_days(message: Message, state: FSMContext):
    
    fut_days=message.text
    use_date = datetime.now()
    await state.update_data(fut_days=message.text, use_date=use_date)
    
    user_data = await state.get_data()
    user_id = user_data['user_id']
    await db.edit_userdata(state, user_id)
    
    req_prices = user_data['prices']
    req_prices['user_id'] = user_id
    req_prices['use_date'] = use_date
    req_prices = req_prices[['user_id', 'use_date','security','open','close',
                             'high','low','volume','q_date',
                             'currency','instrument_type']].drop_duplicates()
    
    await state.update_data(req_prices=req_prices)
    
    await db.edit_requestdata(state, user_id)
    
    await message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏:" 
            f"\n{user_data['market_name_ru']} –Ω–∞ –§–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ\n"
            f"–°–∏–º–≤–æ–ª - {user_data['security']}\n" 
            f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ - {user_data['start_date']}\n"
            f"–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {user_data['fut_days']} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥",
        reply_markup=make_row_keyboard(['–ü—Ä–æ–≥–Ω–æ–∑', '–ì—Ä–∞—Ñ–∏–∫', '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'])
    )
    # await state.set_state(StockInputData.input_command)
    await state.clear()

    
#incorrect future days
@router.message(StockInputData.input_future_days)
async def fut_days_incorrect(message: Message, state: FSMContext):
     await message.answer(
        text="–£–ø—Å, –æ—à–∏–±–∫–∞!üòï\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ"
    )